What does /proc/PID/ have?
==========================


attr/
-----


autogroup
auxv
cgroup
clear_refs

cmdline
-------

  This read-only file holds the complete command line for the process, unless the process is a zombie.  In the latter case, there is nothing in this file:  that  is,  a
  read  on  this  file will return 0 characters.  The command-line arguments appear in this file as a set of strings separated by null bytes ('\0'), with a further null
  byte after the last string.

  When the process is started by the kernel, cmdline is NUL-separated, and the kernel code simply copies the range of memory where argv[] was at process startup into the
  output buffer when you read /proc/PID/cmdline.

  e.g.
  I once met a problem where /proc/PID/cmdline contains incorrect value. It turns out that I was using an uninitialzed char *s in program.
  The codes are like:
  {
	char *s;
	...
	sprintf(s, "%d\n", getpid());
	...
  }
  And it's incorrectly writing to memory that should be used by argv.
  To fix the problem, use char s[16] instead of char *s.

comm
coredump_filter
cpuset
cwd@
environ
exe@
fd/
fdinfo/
gid_map
io
latency
limits
loginuid
map_files/
maps
mem
mountinfo
mounts
mountstats
net/
ns/
numa_maps
oom_adj
oom_score
oom_score_adj
pagemap
personality
projid_map
root@
sched
schedstat
sessionid
setgroups
smaps
stack
stat
statm
status
syscall
task/
timers
timerslack_ns
uid_map
wchan
